/*
O que √© o querySelector()

    -> Documenta√ß√£o Oficial: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector

    O m√©todo querySelector() serve para selecionar um elemento HTML dentro da p√°gina
    (DOM), usando qualquer seletor CSS v√°lido ‚Äî como nome de tag, classe, id, 
    ou combina√ß√µes mais complexas.

    Ele retorna apenas o primeiro elemento que corresponde ao seletor informado.

    Sintaxe
        document.querySelector(seletor);

        document ‚Üí indica que estamos procurando no documento inteiro.
        seletor ‚Üí √© uma string no formato de um seletor CSS.

    Formas de sele√ß√£o
        Selecionar por nome da tag
            let titulo = document.querySelector('h1');
            titulo.textContent = 'Novo t√≠tulo';
        
        Selecionar por classe
            let botao = document.querySelector('.btn-principal');
            botao.style.backgroundColor = 'green';

        Selecionar por id
            let menu = document.querySelector('#menu');
            menu.style.display = 'none';

        Selecionar elementos aninhados
            Voc√™ pode usar hierarquia de seletores, como faria em CSS:

            let item = document.querySelector('ul li');
            console.log(item.textContent);

        ATEN√á√ÉO: s√≥ retorna um elemento. Mesmo que existam v√°rios elementos iguais,
        somente o primeiro ser√° retornado.


O que √© innerHTML

    Documenta√ß√£o -> https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML

    A propriedade innerHTML representa todo o conte√∫do HTML (tags + texto) dentro de um elemento.
    Voc√™ pode:
        Ler o conte√∫do (para obter o HTML interno);
        Escrever (para substituir ou inserir novo conte√∫do).

    ‚ö†Ô∏è Cuidados ao usar innerHTML
    üö´ 1. Sobrescreve todo o conte√∫do
    Ao definir innerHTML = ..., o conte√∫do anterior √© apagado e substitu√≠do ‚Äî 
    o que pode remover event listeners ou causar refluxos desnecess√°rios no DOM.
    Para que isso n√£o ocorra, fazemos a concatena√ß√£o do conte√∫do. Desta forma, o
    conte√∫do presente na p√°gina, permanece e o novo conte√∫do √© inclu√≠do logo ap√≥s
    ex:
        const resultado = document.querySelector('#resultado'); // pego o 
        // conte√∫do presente no primeiro elemento de id igual a resultado
        resultado.innerHTML += `<h3>Nome: ${nome}<br> // sinal de + far√° a concatena√ß√£o do conte√∫do

    üö´ 2. Risco de inje√ß√£o de c√≥digo (XSS)
    Se voc√™ insere conte√∫do vindo de usu√°rio (ex.: formul√°rios, APIs externas) 
    dentro de innerHTML sem valida√ß√£o, algu√©m pode inserir c√≥digo malicioso.

*/


const nome = prompt('Informe o seu nome: ');
const idade = prompt('Informe sua idade');
const altura = prompt('Informe sua altura');
const peso = prompt('Informe seu peso');


// arrow function para calcular o IMC
const IMC = (peso, altura) => {
    const peso1 = Number(peso);
    const altura1 = Number(altura);
    const imc = (peso1 /(altura1**2));
    return imc;
}

// utilizo o seletor querySelector para buscar na minha p√°gina 
// html o elemento que desejo. Ele retorna o primeiro elemento que encontrar
// # -> indica que o item buscado √© um ID
const resultado = document.querySelector('#resultado');

resultado.innerHTML += `<h3>Nome: ${nome}<br>
Idade: ${idade}<br>
Altura: ${altura}<br>
IMC: ${IMC(peso, altura)}<\h3>`;